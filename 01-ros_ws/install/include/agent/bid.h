// Generated by gencpp from file agent/bid.msg
// DO NOT EDIT!


#ifndef AGENT_MESSAGE_BID_H
#define AGENT_MESSAGE_BID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agent
{
template <class ContainerAllocator>
struct bid_
{
  typedef bid_<ContainerAllocator> Type;

  bid_()
    : stamp()
    , robot_id(0)
    , add_info()
    , cost(0.0)
    , params()
    , start_t()
    , start_q()
    , end_t()
    , end_q()  {
    }
  bid_(const ContainerAllocator& _alloc)
    : stamp()
    , robot_id(0)
    , add_info(_alloc)
    , cost(0.0)
    , params(_alloc)
    , start_t()
    , start_q(_alloc)
    , end_t()
    , end_q(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _add_info_type;
  _add_info_type add_info;

   typedef float _cost_type;
  _cost_type cost;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _params_type;
  _params_type params;

   typedef ros::Time _start_t_type;
  _start_t_type start_t;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _start_q_type;
  _start_q_type start_q;

   typedef ros::Time _end_t_type;
  _end_t_type end_t;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _end_q_type;
  _end_q_type end_q;




  typedef boost::shared_ptr< ::agent::bid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agent::bid_<ContainerAllocator> const> ConstPtr;

}; // struct bid_

typedef ::agent::bid_<std::allocator<void> > bid;

typedef boost::shared_ptr< ::agent::bid > bidPtr;
typedef boost::shared_ptr< ::agent::bid const> bidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agent::bid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agent::bid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace agent

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'agent': ['/home/alex/Dropbox/UFMG/04-2-2016/JornalPaper/02-code/01-ros_ws/src/agent/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::agent::bid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent::bid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agent::bid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agent::bid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent::bid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent::bid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agent::bid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3678d4eb4942baeec22254696df3d29";
  }

  static const char* value(const ::agent::bid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3678d4eb4942baeULL;
  static const uint64_t static_value2 = 0xec22254696df3d29ULL;
};

template<class ContainerAllocator>
struct DataType< ::agent::bid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agent/bid";
  }

  static const char* value(const ::agent::bid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agent::bid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
uint32 robot_id\n\
string add_info\n\
float32 cost\n\
float32[] params\n\
time start_t\n\
float32[] start_q\n\
time end_t\n\
float32[] end_q\n\
";
  }

  static const char* value(const ::agent::bid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agent::bid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.robot_id);
      stream.next(m.add_info);
      stream.next(m.cost);
      stream.next(m.params);
      stream.next(m.start_t);
      stream.next(m.start_q);
      stream.next(m.end_t);
      stream.next(m.end_q);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agent::bid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agent::bid_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "robot_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "add_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.add_info);
    s << indent << "cost: ";
    Printer<float>::stream(s, indent + "  ", v.cost);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.params[i]);
    }
    s << indent << "start_t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_t);
    s << indent << "start_q[]" << std::endl;
    for (size_t i = 0; i < v.start_q.size(); ++i)
    {
      s << indent << "  start_q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_q[i]);
    }
    s << indent << "end_t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_t);
    s << indent << "end_q[]" << std::endl;
    for (size_t i = 0; i < v.end_q.size(); ++i)
    {
      s << indent << "  end_q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_q[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGENT_MESSAGE_BID_H
