# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agent/bid.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class bid(genpy.Message):
  _md5sum = "c3678d4eb4942baeec22254696df3d29"
  _type = "agent/bid"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
uint32 robot_id
string add_info
float32 cost
float32[] params
time start_t
float32[] start_q
time end_t
float32[] end_q"""
  __slots__ = ['stamp','robot_id','add_info','cost','params','start_t','start_q','end_t','end_q']
  _slot_types = ['time','uint32','string','float32','float32[]','time','float32[]','time','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,robot_id,add_info,cost,params,start_t,start_q,end_t,end_q

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bid, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.robot_id is None:
        self.robot_id = 0
      if self.add_info is None:
        self.add_info = ''
      if self.cost is None:
        self.cost = 0.
      if self.params is None:
        self.params = []
      if self.start_t is None:
        self.start_t = genpy.Time()
      if self.start_q is None:
        self.start_q = []
      if self.end_t is None:
        self.end_t = genpy.Time()
      if self.end_q is None:
        self.end_q = []
    else:
      self.stamp = genpy.Time()
      self.robot_id = 0
      self.add_info = ''
      self.cost = 0.
      self.params = []
      self.start_t = genpy.Time()
      self.start_q = []
      self.end_t = genpy.Time()
      self.end_q = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.stamp.secs, _x.stamp.nsecs, _x.robot_id))
      _x = self.add_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.cost))
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.params))
      _x = self
      buff.write(_struct_2I.pack(_x.start_t.secs, _x.start_t.nsecs))
      length = len(self.start_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.start_q))
      _x = self
      buff.write(_struct_2I.pack(_x.end_t.secs, _x.end_t.nsecs))
      length = len(self.end_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.end_q))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.start_t is None:
        self.start_t = genpy.Time()
      if self.end_t is None:
        self.end_t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.robot_id,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.add_info = str[start:end].decode('utf-8')
      else:
        self.add_info = str[start:end]
      start = end
      end += 4
      (self.cost,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.params = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.start_t.secs, _x.start_t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_q = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.end_t.secs, _x.end_t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_q = struct.unpack(pattern, str[start:end])
      self.stamp.canon()
      self.start_t.canon()
      self.end_t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.stamp.secs, _x.stamp.nsecs, _x.robot_id))
      _x = self.add_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.cost))
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.params.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.start_t.secs, _x.start_t.nsecs))
      length = len(self.start_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.start_q.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.end_t.secs, _x.end_t.nsecs))
      length = len(self.end_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.end_q.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.start_t is None:
        self.start_t = genpy.Time()
      if self.end_t is None:
        self.end_t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.robot_id,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.add_info = str[start:end].decode('utf-8')
      else:
        self.add_info = str[start:end]
      start = end
      end += 4
      (self.cost,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.params = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.start_t.secs, _x.start_t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_q = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.end_t.secs, _x.end_t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_q = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      self.stamp.canon()
      self.start_t.canon()
      self.end_t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_f = struct.Struct("<f")
